a <- array(rnorm(2*2*10), c(2, 2, 10))
a
apply (a, c(1,2), mean)
rowMeans(a, dims=2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3, 10)
f
gl?
?gl
split(x, f)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(c,4,5,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
clear
clear()
library(datasets)
data(iris)
iris
?iris
iris[101:150, 2]
iris[101:150, 1]
mean(iris[101,150, 1])
mean(iris[101:150, 1])
colMeans(iris)
rowMeans(iris, 1:4)
rowMeans(iris[], 1:4])
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
mean(iris[,1])
data(mtcars)
?mtcars
library(datasets)
data(mtcars)
View(mtcars)
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
?ls
ls(mean)
1
debug(ls)
ls(mean)
?matrix
matrix(1:4, 2, 2)
a <- matrix(1:4, 2, 2)
class(a)
solve(a)
source('~/Documents/School Work/Coursera/Data Science - JHU/2. R Programming/ProgrammingAssignment2.r')
makeCacheMatrix(a)
b <- makeCacheMatrix(a)
cacheSolve(b)
chacheSolve(b)
chacheSolve(b)
b
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3),] =NA
X <- X[sample(1:5),]; X$var2[c(1,3)] =NA
X
X[,1]
X[,"var1"]
x[1:2,"var2"]
X[1:2,"var2"]
X[(X$var1 <= 3 & X$var3 > 11)]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1,decreasing=TRUE)
sort(X$var2,na.last=TRUE)
sort(X$var2)
X[order(X$var1),]
X[order(X$var1,X$var3),]
install.packages(plyr)
install.package(plyr)
install.packages("plyr")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
arrange(X,var1)
arrange(X,dec(var1))
arrange(X,desc(var1))
X$var4 <- rnorm(5)
X
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData,n=3)
tail.(restData,n=3)
tail(restData,n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm=TRUE)
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))
table(restData$zipCode,usaNA="ifany")
table(restData$zipCode,useNA="ifany")
table(restData$councilDistrict,restData$zipCode)
colSums(is.na(restData))
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file=path2csv, stringAsFactors = FALSE)
?read.csv
mydf <- read.csv(file=path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
head(cran)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
str(cran)
summary(cran)
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os ==\ "linux-gun")
filter(cran, size > 100500, r_os == "linux-gun")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id:cran2)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arracnge(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(carn, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
avg_bytes = mean(size))
avg_bytes = mean(size))
pack_sum <- summarize(by_package, count = n(), unique = n_distinct(ip_id), countries = n_distinct(country), avg_bytes = mean(size))
pack_sum
reset()
swirl()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <_ filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_n()
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, decs(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <_ filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, data = res, col = sex_class)
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
?spread
submit()
submit()
extract_numeric("class5")
submit()
students4
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/communities.csv", method="curl")
restData <- read.csv("./data/communities.csv")
comData <- read.csv("./data/communities.csv")
names(comData)
head(comData)
q1 <- comData[(comData$ACR == 3 & comData$AGS == 6),]
q1
head(q1)
q1 <- comData[(comData$ACR <= 3 & comData$AGS <= 6),]
q1
head(q1
)
q1 <- comData[(comData$ACR >= 3 & comData$AGS >= 6),]
head(q1)
View(comData)
comDataNA <- comData[!is.na(comData$ACR),]
comDataNA <- comDataNA[!is.na(comDataNA$AGS),]
View(comDataNA)
q1 <- comDataNA[(comDataNA$ACR == 3 & comDataNA$AGS == 6),]
View(q1)
which(q1)
install.packages("jpeg")
library("jpeg", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "./data/image.jpg", method = "curl")
readJPEG("./data/image.jpg", native = TRUE)
?quantile
image <- readJPEG("./data/image.jpg", native = TRUE)
quantile(image, probs = c(0.3, 0.8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, destfile = "./data/gdp.csv" method = "curl")
download.file(fileUrl, destfile = "./data/gdp.csv", method = "curl")
gdp <- read.csv("./data/gdp.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile = "./data/gdp2.csv", method = "curl")
gdp2 <- read.csv("./data/gdp2.csv")
head(gdp)
View(gdp)
View(gdp2)
merged <- merge(gdp, gdp2)
View(merged)
merged <- merge(gdp, gdp2, by.x = "X", by.y = "CountryCode")
income1 <- merged[merged$Income.Group = "High income: nonOECD",]
income1 <- merged[merged$Income.Group == "High income: nonOECD",]
income2 <- merged[merged$Income.Group == "High income: OECD",]
View(income1)
View(income2)
mean(income2[,2])
sum(income2[,2])
sum(as.Numeric(income2[,2]))
sum(as.numeric(income2[,2]))
3302/30
View(income2)
sum(as.numeric(income1[,2]))
2170/37
2170/23
989/30
2058/37
2058/23
2058/24
source('~/Documents/School Work/Coursera/Data Science - JHU/3. Getting and Cleaning Data/project/run_analysis.R')
setwd("~/Documents/School Work/Coursera/Data Science - JHU/3. Getting and Cleaning Data")
source('~/Documents/School Work/Coursera/Data Science - JHU/3. Getting and Cleaning Data/project/run_analysis.R')
setwd("~/Documents/School Work/Coursera/Data Science - JHU/3. Getting and Cleaning Data/project")
source('~/Documents/School Work/Coursera/Data Science - JHU/3. Getting and Cleaning Data/project/run_analysis.R')
